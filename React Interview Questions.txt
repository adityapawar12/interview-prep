What is React?
React (aka React.js or ReactJS) is an open-source front-end JavaScript library that is used for building composable user interfaces, especially for 
single-page applications. It is used for handling view layer for web and mobile apps based on components in a declarative approach.
React was created by Jordan Walke, a software engineer working for Facebook. React was first deployed on Facebook's News Feed in 2011 and on Instagram in 2012.


What are the major features of React?
The major features of React are:
Uses JSX syntax, a syntax extension of JS that allows developers to write HTML in their JS code.
It uses Virtual DOM instead of Real DOM considering that Real DOM manipulations are expensive.
Supports server-side rendering which is useful for Search Engine Optimizations(SEO).
Follows Unidirectional or one-way data flow or data binding.
Uses reusable/composable UI components to develop the view.


What is JSX?
JSX stands for JavaScript XML and it is an XML-like syntax extension to ECMAScript. 
Basically it just provides the syntactic sugar for the React.createElement(type, props, ...children) function, giving us expressiveness of JavaScript 
along with HTML like template syntax.


How to create components in React?
Function Components: This is the simplest way to create a component. 
Those are pure JavaScript functions that accept props object as the one and only one parameter and return React elements to render the outpu
function Greeting({ message }) {
  return <h1>{`Hello, ${message}`}</h1>;
}
Class Components: You can also use ES6 class to define a component. The above function component can be written as a class component
class Greeting extends React.Component {
  render() {
    return <h1>{`Hello, ${this.props.message}`}</h1>;
  }
}


When to use a Class Component over a Function Component?
After the addition of Hooks(i.e. React 16.8 onwards) it is always recommended to use Function components over Class components in React. 
Because you could use state, lifecycle methods and other features that were only available in class component present in function component too.
Use Function Components:
If you don't need state or lifecycle methods, and your component is purely presentational.
For simplicity, readability, and modern code practices, especially with the use of React Hooks for state and side effects.
Use Class Components:
If you need to manage state or use lifecycle methods.
In scenarios where backward compatibility or integration with older code is necessary.


What are Pure Components?
Pure components are the components which render the same output for the same state and props. 
In function components, you can achieve these pure components through memoized React.memo() API wrapping around the component. 
This API prevents unnecessary re-renders by comparing the previous props and new props using shallow comparison. So it will be helpful for performance optimizations.


What is state in React?
State of a component is an object that holds some information that may change over the lifetime of the component. 
The important point is whenever the state object changes, the component re-renders. 
It is always recommended to make our state as simple as possible and minimize the number of stateful components.
import { useState } from "react";
function User() {
  const [message, setMessage] = useState("Welcome to React world");
  return (
    <div>
      <h1>{message}</h1>
    </div>
  );
}
State is similar to props, but it is private and fully controlled by the component ,i.e., 
it is not accessible to any other component till the owner component decides to pass it.


What are props in React?
Props are inputs to components. They are single values or objects containing a set of values that are passed to components on creation similar to HTML-tag attributes. 
Here, the data is passed down from a parent component to a child component.
The primary purpose of props in React is to provide following component functionality:
Pass custom data to your component.
Trigger state changes.
Use via this.props.reactProp inside component's render() method.
import React from "react";
import ReactDOM from "react-dom";
const ChildComponent = (props) => {
  return (
    <div>
      <p>{props.name}</p>
      <p>{props.age}</p>
      <p>{props.gender}</p>
    </div>
  );
};
const ParentComponent = () => {
  return (
    <div>
      <ChildComponent name="John" age="30" gender="male" />
      <ChildComponent name="Mary" age="25" geneder="female" />
    </div>
  );
};


What is the difference between state and props?
In React, both state and props are plain JavaScript objects and used to manage the data of a component, but they are used in different ways and 
have different characteristics.
The state entity is managed by the component itself and can be updated using the setter(setState() for class components) function. 
Unlike props, state can be modified by the component and is used to manage the internal state of the component. 
Moreover, changes in the state trigger a re-render of the component and its children. The components cannot become reusable with the usage of state alone.
On the otherhand, props (short for "properties") are passed to a component by its parent component and are read-only, 
meaning that they cannot be modified by the own component itself. Also, props can be used to configure the behavior of a component and to pass data between components. 
The components become reusable with the usage of props.


What is the difference between HTML and React event handling?
In HTML, the event name usually represents in lowercase as a convention:
<button onclick="activateLasers()"></button>
Whereas in React it follows camelCase convention:
<button onClick={activateLasers}>
In HTML, you can return false to prevent default behavior:
<a
  href="#"
  onclick='console.log("The link was clicked."); return false;'
/>
Whereas in React you must call preventDefault() explicitly:
function handleClick(event) {
  event.preventDefault();
  console.log("The link was clicked.");
}
In HTML, you need to invoke the function by appending () Whereas in react you should not append () with the function name. (refer "activateLasers" function in the first point for example)